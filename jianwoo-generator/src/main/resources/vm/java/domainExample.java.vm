package ${packageName}.${moduleName}.domain.example;

import java.util.ArrayList;
import java.util.List;
import java.util.Date;
#foreach ($import in $importList)
import ${import};
#end

/**
 * ${functionName}example对象
 *
 * @author ${author}
 * @date ${datetime}
 */
public class ${ClassName}Example {
    protected String orderByClause;

    protected boolean distinct;

    protected List<Criteria> oredCriteria;

    protected Integer start;

    protected Integer rows;

    public ${ClassName}Example() {
        oredCriteria = new ArrayList<Criteria>();
    }

    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    public String getOrderByClause() {
        return orderByClause;
    }

    public void setDistinct(boolean distinct) {
        this.distinct = distinct;
    }

    public boolean isDistinct() {
        return distinct;
    }

    public List<Criteria> getOredCriteria() {
        return oredCriteria;
    }

    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    public Criteria or() {
        Criteria criteria = createCriteriaInternal();
        oredCriteria.add(criteria);
        return criteria;
    }

    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    public void clear() {
        oredCriteria.clear();
        orderByClause = null;
        distinct = false;
    }

    public void setStart(Integer start) {
        this.start=start;
    }

    public Integer getStart() {
        return start;
    }

    public void setRows(Integer rows) {
        this.rows=rows;
    }

    public Integer getRows() {
        return rows;
    }

    protected abstract static class GeneratedCriteria {
        protected List<Criterion> criteria;

        protected GeneratedCriteria() {
            super();
            criteria = new ArrayList<Criterion>();
        }

        public boolean isValid() {
            return criteria.size() > 0;
        }

        public List<Criterion> getAllCriteria() {
            return criteria;
        }

        public List<Criterion> getCriteria() {
            return criteria;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteria.add(new Criterion(condition));
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value));
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value1, value2));
        }

    #foreach ($column in $columns)
        #if($column.javaField.length() > 2 && $column.javaField.substring(1,2).matches("[A-Z]"))
            #set($AttrName=$column.javaField)
        #else
            #set($AttrName=$column.javaField.substring(0,1).toUpperCase() + ${column.javaField.substring(1)})
        #end
        #set($columnName=$column.columnName)
        public Criteria and${AttrName}IsNull() {
            addCriterion("`$columnName` is null");
            return (Criteria) this;
        }

        public Criteria and${AttrName}IsNotNull() {
            addCriterion("`$columnName` is not null");
            return (Criteria) this;
        }

        public Criteria and${AttrName}EqualTo($column.javaType value) {
            addCriterion("`$columnName` =", value, "$column.javaField");
            return (Criteria) this;
        }

        public Criteria and${AttrName}NotEqualTo($column.javaType value) {
            addCriterion("`$columnName` <>", value, "$column.javaField");
            return (Criteria) this;
        }

        public Criteria and${AttrName}GreaterThan($column.javaType value) {
            addCriterion("`$columnName` >", value, "$column.javaField");
            return (Criteria) this;
        }

        public Criteria and${AttrName}GreaterThanOrEqualTo($column.javaType value) {
            addCriterion("`$columnName` >=", value, "$column.javaField");
            return (Criteria) this;
        }

        public Criteria and${AttrName}LessThan($column.javaType value) {
            addCriterion("`$columnName` <", value, "$column.javaField");
            return (Criteria) this;
        }

        public Criteria and${AttrName}LessThanOrEqualTo($column.javaType value) {
            addCriterion("`$columnName` <=", value, "$column.javaField");
            return (Criteria) this;
        }

        public Criteria and${AttrName}In(List<$column.javaType> values) {
            addCriterion("`$columnName` in", values, "$column.javaField");
            return (Criteria) this;
        }

        public Criteria and${AttrName}NotIn(List<$column.javaType> values) {
            addCriterion("`$columnName` not in", values, "$column.javaField");
            return (Criteria) this;
        }

        public Criteria and${AttrName}Between($column.javaType value1, $column.javaType value2) {
            addCriterion("`$columnName` between", value1, value2, "$column.javaField");
            return (Criteria) this;
        }

        public Criteria and${AttrName}NotBetween($column.javaType value1, $column.javaType value2) {
            addCriterion("`$columnName` not between", value1, value2, "$column.javaField");
            return (Criteria) this;
        }

        #if($column.javaType == 'String')

        public Criteria and${AttrName}Like($column.javaType value) {
            addCriterion("`$columnName` like", value, "$column.javaField");
            return (Criteria) this;
        }

        public Criteria and${AttrName}NotLike($column.javaType value) {
            addCriterion("`$columnName` not like", value, "$column.javaField");
            return (Criteria) this;
        }

            public Criteria and${AttrName}LikeInsensitive($column.javaType value) {
                addCriterion("upper(`$columnName`) like", value.toUpperCase(), "$column.javaField");
                return (Criteria) this;
            }

        #end
    #end


        public Criteria andIsNull(String filed) {
            addCriterion(filed + " is null");
            return (Criteria)this;
        }

        public Criteria andIsNotNull(String filed) {
            addCriterion(filed + " is not null");
            return (Criteria)this;
        }

        public Criteria andEqualTo(String filed, String value) {
            addCriterion(filed + " =", value, filed);
            return (Criteria)this;
        }

        public Criteria andNotEqualTo(String filed, String value) {
            addCriterion(filed + " <>", value, filed);
            return (Criteria)this;
        }

        public Criteria andGreaterThan(String filed, String value) {
            addCriterion(filed + " > ", value, filed);
            return (Criteria)this;
        }

        public Criteria andGreaterThanOrEqualTo(String filed, String value) {
            addCriterion(filed + " >=", value, filed);
            return (Criteria)this;
        }

        public Criteria andLessThan(String filed, String value) {
            addCriterion(filed + " <", value, filed);
            return (Criteria)this;
        }

        public Criteria andLessThanOrEqualTo(String filed, String value) {
            addCriterion(filed + " <=", value, filed);
            return (Criteria)this;
        }

        public Criteria andIn(String filed, List value) {
            addCriterion(filed + " in", value, filed);
            return (Criteria)this;
        }

        public Criteria andNotIn(String filed, List value) {
            addCriterion(filed + " not in", value, filed);
            return (Criteria)this;
        }

        public Criteria andBetween(String filed, String value1, String value2) {
            addCriterion(filed + " between", value1, value2, filed);
            return (Criteria)this;
        }

        public Criteria andNotBetween(String filed, String value1, String value2) {
            addCriterion(filed + " not between", value1, value2, filed);
            return (Criteria)this;
        }

        public Criteria andLike(String filed, String value) {
            addCriterion(filed + " like", value, filed);
            return (Criteria)this;
        }

        public Criteria andNotLike(String filed, String value) {
            addCriterion(filed + " not like", value, filed);
            return (Criteria)this;
        }
    }

    public static class Criteria extends GeneratedCriteria {

        protected Criteria() {
            super();
        }
    }

    public static class Criterion {
        private String condition;

        private Object value;

        private Object secondValue;

        private boolean noValue;

        private boolean singleValue;

        private boolean betweenValue;

        private boolean listValue;

        private String typeHandler;

        public String getCondition() {
            return condition;
        }

        public Object getValue() {
            return value;
        }

        public Object getSecondValue() {
            return secondValue;
        }

        public boolean isNoValue() {
            return noValue;
        }

        public boolean isSingleValue() {
            return singleValue;
        }

        public boolean isBetweenValue() {
            return betweenValue;
        }

        public boolean isListValue() {
            return listValue;
        }

        public String getTypeHandler() {
            return typeHandler;
        }

        protected Criterion(String condition) {
            super();
            this.condition = condition;
            this.typeHandler = null;
            this.noValue = true;
        }

        protected Criterion(String condition, Object value, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.typeHandler = typeHandler;
            if (value instanceof List<?>) {
                this.listValue = true;
            } else {
                this.singleValue = true;
            }
        }

        protected Criterion(String condition, Object value) {
            this(condition, value, null);
        }

        protected Criterion(String condition, Object value, Object secondValue, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.secondValue = secondValue;
            this.typeHandler = typeHandler;
            this.betweenValue = true;
        }

        protected Criterion(String condition, Object value, Object secondValue) {
            this(condition, value, secondValue, null);
        }
    }
}