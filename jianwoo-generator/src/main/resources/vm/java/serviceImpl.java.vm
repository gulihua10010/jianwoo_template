package ${packageName}.${moduleName}.service.impl;

import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import java.util.ArrayList;
import com.alibaba.fastjson2.JSON;
import ${packageName}.common.constant.HttpStatus;
import ${packageName}.common.exception.E;
import ${packageName}.common.utils.MessageUtils;
import org.springframework.transaction.annotation.Transactional;
#if($table.sub)
import ${packageName}.${moduleName}.domain.${subClassName};
#end
import lombok.extern.slf4j.Slf4j;
import ${packageName}.${moduleName}.mapper.${ClassName}Mapper;
import ${packageName}.${moduleName}.domain.${ClassName};
import ${packageName}.${moduleName}.service.${ClassName}Service;
import cn.hutool.core.util.IdUtil;


/**
 * ${functionName}Service业务层处理
 * 
 * @author ${author}
 * @date ${datetime}
 */
@Service
@Slf4j
public class ${ClassName}ServiceImpl implements ${ClassName}Service
{
    @Autowired
    private ${ClassName}Mapper ${className}Mapper;


    // 模板引擎生成开始

    /**
     * 查询${functionName}
     * 
     * @param ${pkColumn.javaField} ${functionName}主键
     * @return ${functionName}
     */
    @Override
    public ${ClassName} query${ClassName}By${pkColumn.capJavaField}(${pkColumn.javaType} ${pkColumn.javaField})
    {
        ${ClassName} ${className} = ${className}Mapper.selectByPrimaryKey(${pkColumn.javaField});
        if (${className} == null)
        {
            throw new E(HttpStatus.NOT_FOUND, MessageUtils.message("${businessName}.not.exist", ${pkColumn.javaField}));
        }
        return ${className};
    }

    /**
     * 查询${functionName}列表
     * 
     * @param ${className} ${functionName}
     * @return ${functionName}
     */
    @Override
    public List<${ClassName}> query${ClassName}List(${ClassName} ${className})
    {
        return ${className}Mapper.selectList(${className});
    }

    /**
     * 新增${functionName}
     * 
     * @param ${className} ${functionName}
     * @return 结果
     */
#if($table.sub)
    @Transactional
#end
    @Override
    public void doInsert${ClassName}(${ClassName} ${className})
    {
        #if($genSnowflake)
        long id = IdUtil.getSnowflakeNextId();
        ${className}.set${pkColumn.capJavaField}(id);
        #end
        ${className}.fillInfoBeforeCreate();
#if($table.sub)
        int rows = ${className}Mapper.insertSelective(${className});
        insert${subClassName}(${className});
#else
        int rows = ${className}Mapper.insertSelective(${className});
#end
        if (rows == 0)
        {
            throw new E(HttpStatus.BAD_REQUEST, MessageUtils.message("${businessName}.create.failed"));
        }
    }

    /**
     * 修改${functionName}
     * 
     * @param ${className} ${functionName}
     * @return 结果
     */
#if($table.sub)
    @Transactional
#end
    @Override
    public void doUpdate${ClassName}(${ClassName} ${className})
    {
        ${className}.fillInfoBeforeUpdate();
#if($table.sub)
        ${className}Mapper.delete${subClassName}By${subTableFkClassName}(${className}.get${pkColumn.capJavaField}());
        insert${subClassName}(${className});
#end
        int rows = ${className}Mapper.updateByPrimaryKeySelective(${className});
        if (rows == 0)
        {
            throw new E(HttpStatus.BAD_REQUEST,
                    MessageUtils.message("${businessName}.update.failed", ${businessName}.get${pkColumn.capJavaField}()));
        }
    }

    /**
     * 批量删除${functionName}
     * 
     * @param ${pkColumn.javaField}s 需要删除的${functionName}主键
     * @return 结果
     */
#if($table.sub)
    @Transactional
#end
    @Override
    public void doDelete${ClassName}By${pkColumn.capJavaField}s(${pkColumn.javaType}[] ${pkColumn.javaField}s)
    {
#if($table.sub)
        ${className}Mapper.delete${subClassName}By${subTableFkClassName}s(${pkColumn.javaField}s);
#end
        int rows = ${className}Mapper.deleteByPrimaryKeys(${pkColumn.javaField}s);
        if (rows == 0)
        {
            throw new E(HttpStatus.BAD_REQUEST,
                    MessageUtils.message("${businessName}s.delete.failed", JSON.toJSONString(${pkColumn.javaField}s)));
        }
    }

    /**
     * 删除${functionName}信息
     * 
     * @param ${pkColumn.javaField} ${functionName}主键
     * @return 结果
     */
#if($table.sub)
    @Transactional
#end
    @Override
    public void doDelete${ClassName}By${pkColumn.capJavaField}(${pkColumn.javaType} ${pkColumn.javaField})
    {
#if($table.sub)
        ${className}Mapper.delete${subClassName}By${subTableFkClassName}(${pkColumn.javaField});
#end
        int rows = ${className}Mapper.deleteByPrimaryKey(${pkColumn.javaField});
        if (rows == 0)
        {
            throw new E(HttpStatus.BAD_REQUEST, MessageUtils.message("${businessName}.delete.failed", ${pkColumn.javaField}));
        }
    }
#if($table.sub)

    /**
     * 新增${subTable.functionName}信息
     * 
     * @param ${className} ${functionName}对象
     */
    public void doInsert${subClassName}(${ClassName} ${className})
    {
        List<${subClassName}> ${subclassName}List = ${className}.get${subClassName}List();
        ${pkColumn.javaType} ${pkColumn.javaField} = ${className}.get${pkColumn.capJavaField}();
        if (StringUtils.isNotNull(${subclassName}List))
        {
            List<${subClassName}> list = new ArrayList<${subClassName}>();
            for (${subClassName} ${subclassName} : ${subclassName}List)
            {
                ${subclassName}.set${subTableFkClassName}(${pkColumn.javaField});
                list.add(${subclassName});
            }
            if (list.size() > 0)
            {
                ${className}Mapper.batch${subClassName}(list);
            }
        }
    }
#end

    // 模板引擎生成结束

}
